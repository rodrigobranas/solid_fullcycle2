SOLID

1 - Single Responsibility: Devemos separar coisas que mudam por motivos diferentes (motivo de mudança significa responsabilidade)

4 - Open/Closed: Estar fechado para modificação e aberto para extensão

5 - Liskov Substitution: Se S é subclasse de T, então objetos do tipo T podem ser substituidos por objetos do tipo S, sem quebrar o funcionamento do programa

3 - Interface Segregation: Não depender de "coisas" que você não precisa

2 - Dependency Inversion: High level modules should not depend on low level modules, both should depend on ABSTRACTIONS

* Design OO (Alta Coesão e Baixo Acoplamento)
* Reduza a fragilidade
* Aumente reuso
* Reduza rigidez